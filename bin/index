#!/usr/bin/env node

const { version } = require('../package.json')
const { traceMany, getUnion, getIntersection } = require('../lib')
const formatNumber = require('../lib/format-number')

const args = process.argv
if (args.length < 3) usage()

const modules = []
let rootDir, config, common

for (let i = 2, l = args.length; i < l; ++i) {
  const arg = args[i]
  let match
  if ((match = /^(?:-|--)(\w+)$/.exec(arg))) {
    switch (match[1]) {
      case 'r': case 'rootdir':
        rootDir = args[++i]
        continue
      case 'c': case 'config':
        config = args[++i]
        continue
      case 'common':
        common = true
        continue
      case 'V': case 'version':
        process.stdout.write(`${version}
`)
        process.exit(0)
      case 'h': case 'help':
        usage()
    }
    fail(`Unknown option: "${match[0]}".`)
  }
  modules.push(arg)
}

if (!modules.length) fail('No module supplied.')

traceMany({ modules, rootDir, config })
  .then(({ traced, time }) => {
    if (modules.length > 1) {
      const method = common ? getIntersection : getUnion
      traced = method(Object.values(traced))
    } else {
      traced = traced[modules[0]]
    }
    for (const { id } of traced) {
      process.stdout.write(`${id}
`)
    }
    const duration = Math.round(time * 1000) / 1000
    const prefix = modules.length > 1 ? `${modules.length} modules` : modules[0]
    process.stderr.write(`${prefix} traced in ${formatNumber(duration)}ms
`)
  })
  .catch(({ message }) => fail(message))

function usage () {
  process.stdout.write(`Prints direct and indirect dependencies of one or more RequireJS modules.

Usage: requirejs-dependencies [option...] <module>...

Options:
  -r|--rootdir <path>  source root directory
  -c|--config <path>   configuration file for RequireJS
  --common             print only common dependencies for more modules
  -V|--version         print version number
  -h|--help            print usage instructions

Examples:
  requirejs-dependencies -r src -c src/config.js src/main
  requirejs-dependencies -r src --common src/store src/shell
`)
  process.exit(0)
}

function fail (message) {
  process.stderr.write(`${message}
`)
  process.exit(1)
}
